Grammar

    0 $accept: program $end

    1 program: help_stmt
    2        | /* empty */

    3 help_stmt: stmt help_stmt
    4          | stmt

    5 stmt: expr ';'
    6     | ifstmt
    7     | whilestmt
    8     | forstmt
    9     | returnstmt
   10     | BREAK ';'
   11     | CONTINUE ';'
   12     | block
   13     | funcdef
   14     | comment
   15     | ';'

   16 comment: COMMENT1
   17        | COMMENT2
   18        | COMMENT3

   19 expr: assignexpr
   20     | term
   21     | addsubExpr
   22     | muldivmodExpr
   23     | cmpExpr
   24     | booleanExpr

   25 addsubExpr: expr '+' expr
   26           | expr '-' expr

   27 muldivmodExpr: expr '*' expr
   28              | expr '/' expr
   29              | expr '%' expr

   30 cmpExpr: expr '>' expr
   31        | expr GREATER_EQ expr
   32        | expr '<' expr
   33        | expr LESSER_EQ expr
   34        | expr EQUAL expr
   35        | expr NOTEQUAL expr

   36 booleanExpr: expr AND expr
   37            | expr OR expr

   38 term: '(' expr ')'
   39     | '-' expr
   40     | NOT expr
   41     | plus lvalue
   42     | lvalue plus
   43     | minus lvalue
   44     | lvalue minus
   45     | primary

   46 plus: PLUS_PLUS

   47 minus: MINUS_MINUS

   48 assignexpr: lvalue '=' expr

   49 primary: lvalue
   50        | call
   51        | objectdef
   52        | '(' funcdef ')'
   53        | const

   54 lvalue: IDENTIFIER
   55       | LOCAL IDENTIFIER
   56       | DOUBLE_COLON IDENTIFIER
   57       | member

   58 member: lvalue '.' IDENTIFIER
   59       | lvalue '[' expr ']'
   60       | call '.' IDENTIFIER
   61       | call '[' expr ']'

   62 call: call normcall
   63     | lvalue callsuffix
   64     | '(' funcdef ')' normcall

   65 callsuffix: normcall
   66           | methodcall

   67 normcall: '(' elist ')'

   68 methodcall: DOUBLE_DOT IDENTIFIER '(' elist ')'

   69 elist: expr listed_expr
   70      | expr
   71      | /* empty */

   72 listed_expr: ',' expr listed_expr
   73            | ',' expr

   74 eelist: expr
   75       | expr listed_eexpr

   76 listed_eexpr: ',' expr
   77             | ',' expr listed_eexpr

   78 objectdef: '[' ']'
   79          | '[' eelist ']'
   80          | '[' indexed ']'

   81 indexed: indexedelem indexed_expr
   82        | indexedelem

   83 indexed_expr: ',' indexedelem indexed_expr
   84             | ',' indexedelem

   85 indexedelem: '{' expr ':' expr '}'

   86 $@1: /* empty */

   87 block: '{' $@1 stmt morestmt '}'

   88 $@2: /* empty */

   89 block: '{' $@2 '}'

   90 morestmt: stmt morestmt
   91         | /* empty */

   92 $@3: /* empty */

   93 $@4: /* empty */

   94 funcdef: FUNCTION IDENTIFIER $@3 '(' idlist ')' $@4 block

   95 $@5: /* empty */

   96 $@6: /* empty */

   97 funcdef: FUNCTION $@5 '(' idlist ')' $@6 block

   98 const: INTEGER
   99      | FLOAT
  100      | STRING_DEF
  101      | NIL
  102      | TRUE
  103      | FALSE

  104 idlist: IDENTIFIER
  105       | IDENTIFIER helpidlist
  106       | /* empty */
  107       | comment
  108       | IDENTIFIER comment
  109       | IDENTIFIER helpidlist comment

  110 helpidlist: ',' IDENTIFIER helpidlist
  111           | ',' IDENTIFIER

  112 ifstmt: IF '(' expr ')' stmt
  113       | IF '(' expr ')' stmt ELSE stmt

  114 $@7: /* empty */

  115 whilestmt: WHILE $@7 '(' expr ')' stmt

  116 $@8: /* empty */

  117 forstmt: FOR $@8 '(' elist ';' expr ';' elist ')' stmt

  118 returnstmt: RETURN ';'
  119           | RETURN expr ';'


Terminals, with rules where they appear

$end (0) 0
'%' (37) 29
'(' (40) 38 52 64 67 68 94 97 112 113 115 117
')' (41) 38 52 64 67 68 94 97 112 113 115 117
'*' (42) 27
'+' (43) 25
',' (44) 72 73 76 77 83 84 110 111
'-' (45) 26 39
'.' (46) 58 60
'/' (47) 28
':' (58) 85
';' (59) 5 10 11 15 117 118 119
'<' (60) 32
'=' (61) 48
'>' (62) 30
'[' (91) 59 61 78 79 80
']' (93) 59 61 78 79 80
'{' (123) 85 87 89
'}' (125) 85 87 89
error (256)
INTEGER (258) 98
FLOAT (259) 99
IDENTIFIER (260) 54 55 56 58 60 68 94 104 105 108 109 110 111
STRING_DEF (261) 100
COMMENT1 (262) 16
COMMENT2 (263) 17
COMMENT3 (264) 18
IF (265) 112 113
ELSE (266) 113
WHILE (267) 115
FOR (268) 117
FUNCTION (269) 94 97
RETURN (270) 118 119
BREAK (271) 10
CONTINUE (272) 11
AND (273) 36
NOT (274) 40
OR (275) 37
LOCAL (276) 55
TRUE (277) 102
FALSE (278) 103
NIL (279) 101
GREATER_EQ (280) 31
LESSER_EQ (281) 33
DOUBLE_COLON (282) 56
DOUBLE_DOT (283) 68
PLUS_PLUS (284) 46
MINUS_MINUS (285) 47
NOTEQUAL (286) 35
EQUAL (287) 34
UMINUS (288)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 1 2, on right: 0
help_stmt (54)
    on left: 3 4, on right: 1 3
stmt (55)
    on left: 5 6 7 8 9 10 11 12 13 14 15, on right: 3 4 87 90 112 113
    115 117
comment (56)
    on left: 16 17 18, on right: 14 107 108 109
expr (57)
    on left: 19 20 21 22 23 24, on right: 5 25 26 27 28 29 30 31 32
    33 34 35 36 37 38 39 40 48 59 61 69 70 72 73 74 75 76 77 85 112
    113 115 117 119
addsubExpr (58)
    on left: 25 26, on right: 21
muldivmodExpr (59)
    on left: 27 28 29, on right: 22
cmpExpr (60)
    on left: 30 31 32 33 34 35, on right: 23
booleanExpr (61)
    on left: 36 37, on right: 24
term (62)
    on left: 38 39 40 41 42 43 44 45, on right: 20
plus (63)
    on left: 46, on right: 41 42
minus (64)
    on left: 47, on right: 43 44
assignexpr (65)
    on left: 48, on right: 19
primary (66)
    on left: 49 50 51 52 53, on right: 45
lvalue (67)
    on left: 54 55 56 57, on right: 41 42 43 44 48 49 58 59 63
member (68)
    on left: 58 59 60 61, on right: 57
call (69)
    on left: 62 63 64, on right: 50 60 61 62
callsuffix (70)
    on left: 65 66, on right: 63
normcall (71)
    on left: 67, on right: 62 64 65
methodcall (72)
    on left: 68, on right: 66
elist (73)
    on left: 69 70 71, on right: 67 68 117
listed_expr (74)
    on left: 72 73, on right: 69 72
eelist (75)
    on left: 74 75, on right: 79
listed_eexpr (76)
    on left: 76 77, on right: 75 77
objectdef (77)
    on left: 78 79 80, on right: 51
indexed (78)
    on left: 81 82, on right: 80
indexed_expr (79)
    on left: 83 84, on right: 81 83
indexedelem (80)
    on left: 85, on right: 81 82 83 84
block (81)
    on left: 87 89, on right: 12 94 97
$@1 (82)
    on left: 86, on right: 87
$@2 (83)
    on left: 88, on right: 89
morestmt (84)
    on left: 90 91, on right: 87 90
funcdef (85)
    on left: 94 97, on right: 13 52 64
$@3 (86)
    on left: 92, on right: 94
$@4 (87)
    on left: 93, on right: 94
$@5 (88)
    on left: 95, on right: 97
$@6 (89)
    on left: 96, on right: 97
const (90)
    on left: 98 99 100 101 102 103, on right: 53
idlist (91)
    on left: 104 105 106 107 108 109, on right: 94 97
helpidlist (92)
    on left: 110 111, on right: 105 109 110
ifstmt (93)
    on left: 112 113, on right: 6
whilestmt (94)
    on left: 115, on right: 7
$@7 (95)
    on left: 114, on right: 115
forstmt (96)
    on left: 117, on right: 8
$@8 (97)
    on left: 116, on right: 117
returnstmt (98)
    on left: 118 119, on right: 9


state 0

    0 $accept: . program $end

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    COMMENT1      shift, and go to state 5
    COMMENT2      shift, and go to state 6
    COMMENT3      shift, and go to state 7
    IF            shift, and go to state 8
    WHILE         shift, and go to state 9
    FOR           shift, and go to state 10
    FUNCTION      shift, and go to state 11
    RETURN        shift, and go to state 12
    BREAK         shift, and go to state 13
    CONTINUE      shift, and go to state 14
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25
    ';'           shift, and go to state 26
    '{'           shift, and go to state 27

    $default  reduce using rule 2 (program)

    program        go to state 28
    help_stmt      go to state 29
    stmt           go to state 30
    comment        go to state 31
    expr           go to state 32
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    block          go to state 46
    funcdef        go to state 47
    const          go to state 48
    ifstmt         go to state 49
    whilestmt      go to state 50
    forstmt        go to state 51
    returnstmt     go to state 52


state 1

   98 const: INTEGER .

    $default  reduce using rule 98 (const)


state 2

   99 const: FLOAT .

    $default  reduce using rule 99 (const)


state 3

   54 lvalue: IDENTIFIER .

    $default  reduce using rule 54 (lvalue)


state 4

  100 const: STRING_DEF .

    $default  reduce using rule 100 (const)


state 5

   16 comment: COMMENT1 .

    $default  reduce using rule 16 (comment)


state 6

   17 comment: COMMENT2 .

    $default  reduce using rule 17 (comment)


state 7

   18 comment: COMMENT3 .

    $default  reduce using rule 18 (comment)


state 8

  112 ifstmt: IF . '(' expr ')' stmt
  113       | IF . '(' expr ')' stmt ELSE stmt

    '('  shift, and go to state 53


state 9

  115 whilestmt: WHILE . $@7 '(' expr ')' stmt

    $default  reduce using rule 114 ($@7)

    $@7  go to state 54


state 10

  117 forstmt: FOR . $@8 '(' elist ';' expr ';' elist ')' stmt

    $default  reduce using rule 116 ($@8)

    $@8  go to state 55


state 11

   94 funcdef: FUNCTION . IDENTIFIER $@3 '(' idlist ')' $@4 block
   97        | FUNCTION . $@5 '(' idlist ')' $@6 block

    IDENTIFIER  shift, and go to state 56

    $default  reduce using rule 95 ($@5)

    $@5  go to state 57


state 12

  118 returnstmt: RETURN . ';'
  119           | RETURN . expr ';'

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25
    ';'           shift, and go to state 58

    expr           go to state 59
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 13

   10 stmt: BREAK . ';'

    ';'  shift, and go to state 60


state 14

   11 stmt: CONTINUE . ';'

    ';'  shift, and go to state 61


state 15

   40 term: NOT . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 62
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 16

   55 lvalue: LOCAL . IDENTIFIER

    IDENTIFIER  shift, and go to state 63


state 17

  102 const: TRUE .

    $default  reduce using rule 102 (const)


state 18

  103 const: FALSE .

    $default  reduce using rule 103 (const)


state 19

  101 const: NIL .

    $default  reduce using rule 101 (const)


state 20

   56 lvalue: DOUBLE_COLON . IDENTIFIER

    IDENTIFIER  shift, and go to state 64


state 21

   46 plus: PLUS_PLUS .

    $default  reduce using rule 46 (plus)


state 22

   47 minus: MINUS_MINUS .

    $default  reduce using rule 47 (minus)


state 23

   39 term: '-' . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 65
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 24

   78 objectdef: '[' . ']'
   79          | '[' . eelist ']'
   80          | '[' . indexed ']'

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    ']'           shift, and go to state 66
    '('           shift, and go to state 25
    '{'           shift, and go to state 67

    expr           go to state 68
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    eelist         go to state 69
    objectdef      go to state 45
    indexed        go to state 70
    indexedelem    go to state 71
    const          go to state 48


state 25

   38 term: '(' . expr ')'
   52 primary: '(' . funcdef ')'
   64 call: '(' . funcdef ')' normcall

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    FUNCTION      shift, and go to state 11
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 72
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    funcdef        go to state 73
    const          go to state 48


state 26

   15 stmt: ';' .

    $default  reduce using rule 15 (stmt)


state 27

   87 block: '{' . $@1 stmt morestmt '}'
   89      | '{' . $@2 '}'

    '}'       reduce using rule 88 ($@2)
    $default  reduce using rule 86 ($@1)

    $@1  go to state 74
    $@2  go to state 75


state 28

    0 $accept: program . $end

    $end  shift, and go to state 76


state 29

    1 program: help_stmt .

    $default  reduce using rule 1 (program)


state 30

    3 help_stmt: stmt . help_stmt
    4          | stmt .

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    COMMENT1      shift, and go to state 5
    COMMENT2      shift, and go to state 6
    COMMENT3      shift, and go to state 7
    IF            shift, and go to state 8
    WHILE         shift, and go to state 9
    FOR           shift, and go to state 10
    FUNCTION      shift, and go to state 11
    RETURN        shift, and go to state 12
    BREAK         shift, and go to state 13
    CONTINUE      shift, and go to state 14
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25
    ';'           shift, and go to state 26
    '{'           shift, and go to state 27

    $default  reduce using rule 4 (help_stmt)

    help_stmt      go to state 77
    stmt           go to state 30
    comment        go to state 31
    expr           go to state 32
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    block          go to state 46
    funcdef        go to state 47
    const          go to state 48
    ifstmt         go to state 49
    whilestmt      go to state 50
    forstmt        go to state 51
    returnstmt     go to state 52


state 31

   14 stmt: comment .

    $default  reduce using rule 14 (stmt)


state 32

    5 stmt: expr . ';'
   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr

    AND         shift, and go to state 78
    OR          shift, and go to state 79
    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90
    ';'         shift, and go to state 91


state 33

   21 expr: addsubExpr .

    $default  reduce using rule 21 (expr)


state 34

   22 expr: muldivmodExpr .

    $default  reduce using rule 22 (expr)


state 35

   23 expr: cmpExpr .

    $default  reduce using rule 23 (expr)


state 36

   24 expr: booleanExpr .

    $default  reduce using rule 24 (expr)


state 37

   20 expr: term .

    $default  reduce using rule 20 (expr)


state 38

   41 term: plus . lvalue

    IDENTIFIER    shift, and go to state 3
    LOCAL         shift, and go to state 16
    DOUBLE_COLON  shift, and go to state 20
    '('           shift, and go to state 92

    lvalue  go to state 93
    member  go to state 43
    call    go to state 94


state 39

   43 term: minus . lvalue

    IDENTIFIER    shift, and go to state 3
    LOCAL         shift, and go to state 16
    DOUBLE_COLON  shift, and go to state 20
    '('           shift, and go to state 92

    lvalue  go to state 95
    member  go to state 43
    call    go to state 94


state 40

   19 expr: assignexpr .

    $default  reduce using rule 19 (expr)


state 41

   45 term: primary .

    $default  reduce using rule 45 (term)


state 42

   42 term: lvalue . plus
   44     | lvalue . minus
   48 assignexpr: lvalue . '=' expr
   49 primary: lvalue .
   58 member: lvalue . '.' IDENTIFIER
   59       | lvalue . '[' expr ']'
   63 call: lvalue . callsuffix

    DOUBLE_DOT   shift, and go to state 96
    PLUS_PLUS    shift, and go to state 21
    MINUS_MINUS  shift, and go to state 22
    '='          shift, and go to state 97
    '.'          shift, and go to state 98
    '['          shift, and go to state 99
    '('          shift, and go to state 100

    $default  reduce using rule 49 (primary)

    plus        go to state 101
    minus       go to state 102
    callsuffix  go to state 103
    normcall    go to state 104
    methodcall  go to state 105


state 43

   57 lvalue: member .

    $default  reduce using rule 57 (lvalue)


state 44

   50 primary: call .
   60 member: call . '.' IDENTIFIER
   61       | call . '[' expr ']'
   62 call: call . normcall

    '.'  shift, and go to state 106
    '['  shift, and go to state 107
    '('  shift, and go to state 100

    $default  reduce using rule 50 (primary)

    normcall  go to state 108


state 45

   51 primary: objectdef .

    $default  reduce using rule 51 (primary)


state 46

   12 stmt: block .

    $default  reduce using rule 12 (stmt)


state 47

   13 stmt: funcdef .

    $default  reduce using rule 13 (stmt)


state 48

   53 primary: const .

    $default  reduce using rule 53 (primary)


state 49

    6 stmt: ifstmt .

    $default  reduce using rule 6 (stmt)


state 50

    7 stmt: whilestmt .

    $default  reduce using rule 7 (stmt)


state 51

    8 stmt: forstmt .

    $default  reduce using rule 8 (stmt)


state 52

    9 stmt: returnstmt .

    $default  reduce using rule 9 (stmt)


state 53

  112 ifstmt: IF '(' . expr ')' stmt
  113       | IF '(' . expr ')' stmt ELSE stmt

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 109
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 54

  115 whilestmt: WHILE $@7 . '(' expr ')' stmt

    '('  shift, and go to state 110


state 55

  117 forstmt: FOR $@8 . '(' elist ';' expr ';' elist ')' stmt

    '('  shift, and go to state 111


state 56

   94 funcdef: FUNCTION IDENTIFIER . $@3 '(' idlist ')' $@4 block

    $default  reduce using rule 92 ($@3)

    $@3  go to state 112


state 57

   97 funcdef: FUNCTION $@5 . '(' idlist ')' $@6 block

    '('  shift, and go to state 113


state 58

  118 returnstmt: RETURN ';' .

    $default  reduce using rule 118 (returnstmt)


state 59

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
  119 returnstmt: RETURN expr . ';'

    AND         shift, and go to state 78
    OR          shift, and go to state 79
    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90
    ';'         shift, and go to state 114


state 60

   10 stmt: BREAK ';' .

    $default  reduce using rule 10 (stmt)


state 61

   11 stmt: CONTINUE ';' .

    $default  reduce using rule 11 (stmt)


state 62

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
   40 term: NOT expr .

    $default  reduce using rule 40 (term)


state 63

   55 lvalue: LOCAL IDENTIFIER .

    $default  reduce using rule 55 (lvalue)


state 64

   56 lvalue: DOUBLE_COLON IDENTIFIER .

    $default  reduce using rule 56 (lvalue)


state 65

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
   39 term: '-' expr .

    $default  reduce using rule 39 (term)


state 66

   78 objectdef: '[' ']' .

    $default  reduce using rule 78 (objectdef)


state 67

   85 indexedelem: '{' . expr ':' expr '}'

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 115
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 68

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
   74 eelist: expr .
   75       | expr . listed_eexpr

    AND         shift, and go to state 78
    OR          shift, and go to state 79
    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90
    ','         shift, and go to state 116

    $default  reduce using rule 74 (eelist)

    listed_eexpr  go to state 117


state 69

   79 objectdef: '[' eelist . ']'

    ']'  shift, and go to state 118


state 70

   80 objectdef: '[' indexed . ']'

    ']'  shift, and go to state 119


state 71

   81 indexed: indexedelem . indexed_expr
   82        | indexedelem .

    ','  shift, and go to state 120

    $default  reduce using rule 82 (indexed)

    indexed_expr  go to state 121


state 72

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
   38 term: '(' expr . ')'

    AND         shift, and go to state 78
    OR          shift, and go to state 79
    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90
    ')'         shift, and go to state 122


state 73

   52 primary: '(' funcdef . ')'
   64 call: '(' funcdef . ')' normcall

    ')'  shift, and go to state 123


state 74

   87 block: '{' $@1 . stmt morestmt '}'

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    COMMENT1      shift, and go to state 5
    COMMENT2      shift, and go to state 6
    COMMENT3      shift, and go to state 7
    IF            shift, and go to state 8
    WHILE         shift, and go to state 9
    FOR           shift, and go to state 10
    FUNCTION      shift, and go to state 11
    RETURN        shift, and go to state 12
    BREAK         shift, and go to state 13
    CONTINUE      shift, and go to state 14
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25
    ';'           shift, and go to state 26
    '{'           shift, and go to state 27

    stmt           go to state 124
    comment        go to state 31
    expr           go to state 32
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    block          go to state 46
    funcdef        go to state 47
    const          go to state 48
    ifstmt         go to state 49
    whilestmt      go to state 50
    forstmt        go to state 51
    returnstmt     go to state 52


state 75

   89 block: '{' $@2 . '}'

    '}'  shift, and go to state 125


state 76

    0 $accept: program $end .

    $default  accept


state 77

    3 help_stmt: stmt help_stmt .

    $default  reduce using rule 3 (help_stmt)


state 78

   36 booleanExpr: expr AND . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 126
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 79

   37 booleanExpr: expr OR . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 127
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 80

   31 cmpExpr: expr GREATER_EQ . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 128
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 81

   33 cmpExpr: expr LESSER_EQ . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 129
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 82

   35 cmpExpr: expr NOTEQUAL . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 130
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 83

   34 cmpExpr: expr EQUAL . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 131
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 84

   30 cmpExpr: expr '>' . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 132
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 85

   32 cmpExpr: expr '<' . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 133
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 86

   25 addsubExpr: expr '+' . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 134
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 87

   26 addsubExpr: expr '-' . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 135
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 88

   27 muldivmodExpr: expr '*' . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 136
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 89

   28 muldivmodExpr: expr '/' . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 137
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 90

   29 muldivmodExpr: expr '%' . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 138
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 91

    5 stmt: expr ';' .

    $default  reduce using rule 5 (stmt)


state 92

   64 call: '(' . funcdef ')' normcall

    FUNCTION  shift, and go to state 11

    funcdef  go to state 139


state 93

   41 term: plus lvalue .
   58 member: lvalue . '.' IDENTIFIER
   59       | lvalue . '[' expr ']'
   63 call: lvalue . callsuffix

    DOUBLE_DOT  shift, and go to state 96
    '.'         shift, and go to state 98
    '['         shift, and go to state 99
    '('         shift, and go to state 100

    $default  reduce using rule 41 (term)

    callsuffix  go to state 103
    normcall    go to state 104
    methodcall  go to state 105


state 94

   60 member: call . '.' IDENTIFIER
   61       | call . '[' expr ']'
   62 call: call . normcall

    '.'  shift, and go to state 106
    '['  shift, and go to state 107
    '('  shift, and go to state 100

    normcall  go to state 108


state 95

   43 term: minus lvalue .
   58 member: lvalue . '.' IDENTIFIER
   59       | lvalue . '[' expr ']'
   63 call: lvalue . callsuffix

    DOUBLE_DOT  shift, and go to state 96
    '.'         shift, and go to state 98
    '['         shift, and go to state 99
    '('         shift, and go to state 100

    $default  reduce using rule 43 (term)

    callsuffix  go to state 103
    normcall    go to state 104
    methodcall  go to state 105


state 96

   68 methodcall: DOUBLE_DOT . IDENTIFIER '(' elist ')'

    IDENTIFIER  shift, and go to state 140


state 97

   48 assignexpr: lvalue '=' . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 141
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 98

   58 member: lvalue '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 142


state 99

   59 member: lvalue '[' . expr ']'

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 143
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 100

   67 normcall: '(' . elist ')'

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    $default  reduce using rule 71 (elist)

    expr           go to state 144
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    elist          go to state 145
    objectdef      go to state 45
    const          go to state 48


state 101

   42 term: lvalue plus .

    $default  reduce using rule 42 (term)


state 102

   44 term: lvalue minus .

    $default  reduce using rule 44 (term)


state 103

   63 call: lvalue callsuffix .

    $default  reduce using rule 63 (call)


state 104

   65 callsuffix: normcall .

    $default  reduce using rule 65 (callsuffix)


state 105

   66 callsuffix: methodcall .

    $default  reduce using rule 66 (callsuffix)


state 106

   60 member: call '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 146


state 107

   61 member: call '[' . expr ']'

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 147
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 108

   62 call: call normcall .

    $default  reduce using rule 62 (call)


state 109

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
  112 ifstmt: IF '(' expr . ')' stmt
  113       | IF '(' expr . ')' stmt ELSE stmt

    AND         shift, and go to state 78
    OR          shift, and go to state 79
    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90
    ')'         shift, and go to state 148


state 110

  115 whilestmt: WHILE $@7 '(' . expr ')' stmt

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 149
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 111

  117 forstmt: FOR $@8 '(' . elist ';' expr ';' elist ')' stmt

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    $default  reduce using rule 71 (elist)

    expr           go to state 144
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    elist          go to state 150
    objectdef      go to state 45
    const          go to state 48


state 112

   94 funcdef: FUNCTION IDENTIFIER $@3 . '(' idlist ')' $@4 block

    '('  shift, and go to state 151


state 113

   97 funcdef: FUNCTION $@5 '(' . idlist ')' $@6 block

    IDENTIFIER  shift, and go to state 152
    COMMENT1    shift, and go to state 5
    COMMENT2    shift, and go to state 6
    COMMENT3    shift, and go to state 7

    $default  reduce using rule 106 (idlist)

    comment  go to state 153
    idlist   go to state 154


state 114

  119 returnstmt: RETURN expr ';' .

    $default  reduce using rule 119 (returnstmt)


state 115

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
   85 indexedelem: '{' expr . ':' expr '}'

    AND         shift, and go to state 78
    OR          shift, and go to state 79
    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90
    ':'         shift, and go to state 155


state 116

   76 listed_eexpr: ',' . expr
   77             | ',' . expr listed_eexpr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 156
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 117

   75 eelist: expr listed_eexpr .

    $default  reduce using rule 75 (eelist)


state 118

   79 objectdef: '[' eelist ']' .

    $default  reduce using rule 79 (objectdef)


state 119

   80 objectdef: '[' indexed ']' .

    $default  reduce using rule 80 (objectdef)


state 120

   83 indexed_expr: ',' . indexedelem indexed_expr
   84             | ',' . indexedelem

    '{'  shift, and go to state 67

    indexedelem  go to state 157


state 121

   81 indexed: indexedelem indexed_expr .

    $default  reduce using rule 81 (indexed)


state 122

   38 term: '(' expr ')' .

    $default  reduce using rule 38 (term)


state 123

   52 primary: '(' funcdef ')' .
   64 call: '(' funcdef ')' . normcall

    '('  shift, and go to state 100

    $default  reduce using rule 52 (primary)

    normcall  go to state 158


state 124

   87 block: '{' $@1 stmt . morestmt '}'

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    COMMENT1      shift, and go to state 5
    COMMENT2      shift, and go to state 6
    COMMENT3      shift, and go to state 7
    IF            shift, and go to state 8
    WHILE         shift, and go to state 9
    FOR           shift, and go to state 10
    FUNCTION      shift, and go to state 11
    RETURN        shift, and go to state 12
    BREAK         shift, and go to state 13
    CONTINUE      shift, and go to state 14
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25
    ';'           shift, and go to state 26
    '{'           shift, and go to state 27

    $default  reduce using rule 91 (morestmt)

    stmt           go to state 159
    comment        go to state 31
    expr           go to state 32
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    block          go to state 46
    morestmt       go to state 160
    funcdef        go to state 47
    const          go to state 48
    ifstmt         go to state 49
    whilestmt      go to state 50
    forstmt        go to state 51
    returnstmt     go to state 52


state 125

   89 block: '{' $@2 '}' .

    $default  reduce using rule 89 (block)


state 126

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   36            | expr AND expr .
   37            | expr . OR expr

    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90

    $default  reduce using rule 36 (booleanExpr)


state 127

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
   37            | expr OR expr .

    AND         shift, and go to state 78
    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90

    $default  reduce using rule 37 (booleanExpr)


state 128

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   31        | expr GREATER_EQ expr .
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90

    GREATER_EQ  error (nonassociative)
    LESSER_EQ   error (nonassociative)
    '>'         error (nonassociative)
    '<'         error (nonassociative)

    $default  reduce using rule 31 (cmpExpr)


state 129

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   33        | expr LESSER_EQ expr .
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90

    GREATER_EQ  error (nonassociative)
    LESSER_EQ   error (nonassociative)
    '>'         error (nonassociative)
    '<'         error (nonassociative)

    $default  reduce using rule 33 (cmpExpr)


state 130

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   35        | expr NOTEQUAL expr .
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr

    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90

    NOTEQUAL  error (nonassociative)
    EQUAL     error (nonassociative)

    $default  reduce using rule 35 (cmpExpr)


state 131

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   34        | expr EQUAL expr .
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr

    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90

    NOTEQUAL  error (nonassociative)
    EQUAL     error (nonassociative)

    $default  reduce using rule 34 (cmpExpr)


state 132

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   30        | expr '>' expr .
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90

    GREATER_EQ  error (nonassociative)
    LESSER_EQ   error (nonassociative)
    '>'         error (nonassociative)
    '<'         error (nonassociative)

    $default  reduce using rule 30 (cmpExpr)


state 133

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   32        | expr '<' expr .
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90

    GREATER_EQ  error (nonassociative)
    LESSER_EQ   error (nonassociative)
    '>'         error (nonassociative)
    '<'         error (nonassociative)

    $default  reduce using rule 32 (cmpExpr)


state 134

   25 addsubExpr: expr . '+' expr
   25           | expr '+' expr .
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90

    $default  reduce using rule 25 (addsubExpr)


state 135

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   26           | expr '-' expr .
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90

    $default  reduce using rule 26 (addsubExpr)


state 136

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   27              | expr '*' expr .
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr

    $default  reduce using rule 27 (muldivmodExpr)


state 137

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   28              | expr '/' expr .
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr

    $default  reduce using rule 28 (muldivmodExpr)


state 138

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   29              | expr '%' expr .
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr

    $default  reduce using rule 29 (muldivmodExpr)


state 139

   64 call: '(' funcdef . ')' normcall

    ')'  shift, and go to state 161


state 140

   68 methodcall: DOUBLE_DOT IDENTIFIER . '(' elist ')'

    '('  shift, and go to state 162


state 141

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
   48 assignexpr: lvalue '=' expr .

    AND         shift, and go to state 78
    OR          shift, and go to state 79
    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90

    $default  reduce using rule 48 (assignexpr)


state 142

   58 member: lvalue '.' IDENTIFIER .

    $default  reduce using rule 58 (member)


state 143

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
   59 member: lvalue '[' expr . ']'

    AND         shift, and go to state 78
    OR          shift, and go to state 79
    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90
    ']'         shift, and go to state 163


state 144

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
   69 elist: expr . listed_expr
   70      | expr .

    AND         shift, and go to state 78
    OR          shift, and go to state 79
    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90
    ','         shift, and go to state 164

    $default  reduce using rule 70 (elist)

    listed_expr  go to state 165


state 145

   67 normcall: '(' elist . ')'

    ')'  shift, and go to state 166


state 146

   60 member: call '.' IDENTIFIER .

    $default  reduce using rule 60 (member)


state 147

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
   61 member: call '[' expr . ']'

    AND         shift, and go to state 78
    OR          shift, and go to state 79
    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90
    ']'         shift, and go to state 167


state 148

  112 ifstmt: IF '(' expr ')' . stmt
  113       | IF '(' expr ')' . stmt ELSE stmt

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    COMMENT1      shift, and go to state 5
    COMMENT2      shift, and go to state 6
    COMMENT3      shift, and go to state 7
    IF            shift, and go to state 8
    WHILE         shift, and go to state 9
    FOR           shift, and go to state 10
    FUNCTION      shift, and go to state 11
    RETURN        shift, and go to state 12
    BREAK         shift, and go to state 13
    CONTINUE      shift, and go to state 14
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25
    ';'           shift, and go to state 26
    '{'           shift, and go to state 27

    stmt           go to state 168
    comment        go to state 31
    expr           go to state 32
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    block          go to state 46
    funcdef        go to state 47
    const          go to state 48
    ifstmt         go to state 49
    whilestmt      go to state 50
    forstmt        go to state 51
    returnstmt     go to state 52


state 149

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
  115 whilestmt: WHILE $@7 '(' expr . ')' stmt

    AND         shift, and go to state 78
    OR          shift, and go to state 79
    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90
    ')'         shift, and go to state 169


state 150

  117 forstmt: FOR $@8 '(' elist . ';' expr ';' elist ')' stmt

    ';'  shift, and go to state 170


state 151

   94 funcdef: FUNCTION IDENTIFIER $@3 '(' . idlist ')' $@4 block

    IDENTIFIER  shift, and go to state 152
    COMMENT1    shift, and go to state 5
    COMMENT2    shift, and go to state 6
    COMMENT3    shift, and go to state 7

    $default  reduce using rule 106 (idlist)

    comment  go to state 153
    idlist   go to state 171


state 152

  104 idlist: IDENTIFIER .
  105       | IDENTIFIER . helpidlist
  108       | IDENTIFIER . comment
  109       | IDENTIFIER . helpidlist comment

    COMMENT1  shift, and go to state 5
    COMMENT2  shift, and go to state 6
    COMMENT3  shift, and go to state 7
    ','       shift, and go to state 172

    $default  reduce using rule 104 (idlist)

    comment     go to state 173
    helpidlist  go to state 174


state 153

  107 idlist: comment .

    $default  reduce using rule 107 (idlist)


state 154

   97 funcdef: FUNCTION $@5 '(' idlist . ')' $@6 block

    ')'  shift, and go to state 175


state 155

   85 indexedelem: '{' expr ':' . expr '}'

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 176
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 156

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
   76 listed_eexpr: ',' expr .
   77             | ',' expr . listed_eexpr

    AND         shift, and go to state 78
    OR          shift, and go to state 79
    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90
    ','         shift, and go to state 116

    $default  reduce using rule 76 (listed_eexpr)

    listed_eexpr  go to state 177


state 157

   83 indexed_expr: ',' indexedelem . indexed_expr
   84             | ',' indexedelem .

    ','  shift, and go to state 120

    $default  reduce using rule 84 (indexed_expr)

    indexed_expr  go to state 178


state 158

   64 call: '(' funcdef ')' normcall .

    $default  reduce using rule 64 (call)


state 159

   90 morestmt: stmt . morestmt

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    COMMENT1      shift, and go to state 5
    COMMENT2      shift, and go to state 6
    COMMENT3      shift, and go to state 7
    IF            shift, and go to state 8
    WHILE         shift, and go to state 9
    FOR           shift, and go to state 10
    FUNCTION      shift, and go to state 11
    RETURN        shift, and go to state 12
    BREAK         shift, and go to state 13
    CONTINUE      shift, and go to state 14
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25
    ';'           shift, and go to state 26
    '{'           shift, and go to state 27

    $default  reduce using rule 91 (morestmt)

    stmt           go to state 159
    comment        go to state 31
    expr           go to state 32
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    block          go to state 46
    morestmt       go to state 179
    funcdef        go to state 47
    const          go to state 48
    ifstmt         go to state 49
    whilestmt      go to state 50
    forstmt        go to state 51
    returnstmt     go to state 52


state 160

   87 block: '{' $@1 stmt morestmt . '}'

    '}'  shift, and go to state 180


state 161

   64 call: '(' funcdef ')' . normcall

    '('  shift, and go to state 100

    normcall  go to state 158


state 162

   68 methodcall: DOUBLE_DOT IDENTIFIER '(' . elist ')'

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    $default  reduce using rule 71 (elist)

    expr           go to state 144
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    elist          go to state 181
    objectdef      go to state 45
    const          go to state 48


state 163

   59 member: lvalue '[' expr ']' .

    $default  reduce using rule 59 (member)


state 164

   72 listed_expr: ',' . expr listed_expr
   73            | ',' . expr

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 182
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 165

   69 elist: expr listed_expr .

    $default  reduce using rule 69 (elist)


state 166

   67 normcall: '(' elist ')' .

    $default  reduce using rule 67 (normcall)


state 167

   61 member: call '[' expr ']' .

    $default  reduce using rule 61 (member)


state 168

  112 ifstmt: IF '(' expr ')' stmt .
  113       | IF '(' expr ')' stmt . ELSE stmt

    ELSE  shift, and go to state 183

    $default  reduce using rule 112 (ifstmt)


state 169

  115 whilestmt: WHILE $@7 '(' expr ')' . stmt

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    COMMENT1      shift, and go to state 5
    COMMENT2      shift, and go to state 6
    COMMENT3      shift, and go to state 7
    IF            shift, and go to state 8
    WHILE         shift, and go to state 9
    FOR           shift, and go to state 10
    FUNCTION      shift, and go to state 11
    RETURN        shift, and go to state 12
    BREAK         shift, and go to state 13
    CONTINUE      shift, and go to state 14
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25
    ';'           shift, and go to state 26
    '{'           shift, and go to state 27

    stmt           go to state 184
    comment        go to state 31
    expr           go to state 32
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    block          go to state 46
    funcdef        go to state 47
    const          go to state 48
    ifstmt         go to state 49
    whilestmt      go to state 50
    forstmt        go to state 51
    returnstmt     go to state 52


state 170

  117 forstmt: FOR $@8 '(' elist ';' . expr ';' elist ')' stmt

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    expr           go to state 185
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    const          go to state 48


state 171

   94 funcdef: FUNCTION IDENTIFIER $@3 '(' idlist . ')' $@4 block

    ')'  shift, and go to state 186


state 172

  110 helpidlist: ',' . IDENTIFIER helpidlist
  111           | ',' . IDENTIFIER

    IDENTIFIER  shift, and go to state 187


state 173

  108 idlist: IDENTIFIER comment .

    $default  reduce using rule 108 (idlist)


state 174

  105 idlist: IDENTIFIER helpidlist .
  109       | IDENTIFIER helpidlist . comment

    COMMENT1  shift, and go to state 5
    COMMENT2  shift, and go to state 6
    COMMENT3  shift, and go to state 7

    $default  reduce using rule 105 (idlist)

    comment  go to state 188


state 175

   97 funcdef: FUNCTION $@5 '(' idlist ')' . $@6 block

    $default  reduce using rule 96 ($@6)

    $@6  go to state 189


state 176

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
   85 indexedelem: '{' expr ':' expr . '}'

    AND         shift, and go to state 78
    OR          shift, and go to state 79
    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90
    '}'         shift, and go to state 190


state 177

   77 listed_eexpr: ',' expr listed_eexpr .

    $default  reduce using rule 77 (listed_eexpr)


state 178

   83 indexed_expr: ',' indexedelem indexed_expr .

    $default  reduce using rule 83 (indexed_expr)


state 179

   90 morestmt: stmt morestmt .

    $default  reduce using rule 90 (morestmt)


state 180

   87 block: '{' $@1 stmt morestmt '}' .

    $default  reduce using rule 87 (block)


state 181

   68 methodcall: DOUBLE_DOT IDENTIFIER '(' elist . ')'

    ')'  shift, and go to state 191


state 182

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
   72 listed_expr: ',' expr . listed_expr
   73            | ',' expr .

    AND         shift, and go to state 78
    OR          shift, and go to state 79
    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90
    ','         shift, and go to state 164

    $default  reduce using rule 73 (listed_expr)

    listed_expr  go to state 192


state 183

  113 ifstmt: IF '(' expr ')' stmt ELSE . stmt

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    COMMENT1      shift, and go to state 5
    COMMENT2      shift, and go to state 6
    COMMENT3      shift, and go to state 7
    IF            shift, and go to state 8
    WHILE         shift, and go to state 9
    FOR           shift, and go to state 10
    FUNCTION      shift, and go to state 11
    RETURN        shift, and go to state 12
    BREAK         shift, and go to state 13
    CONTINUE      shift, and go to state 14
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25
    ';'           shift, and go to state 26
    '{'           shift, and go to state 27

    stmt           go to state 193
    comment        go to state 31
    expr           go to state 32
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    block          go to state 46
    funcdef        go to state 47
    const          go to state 48
    ifstmt         go to state 49
    whilestmt      go to state 50
    forstmt        go to state 51
    returnstmt     go to state 52


state 184

  115 whilestmt: WHILE $@7 '(' expr ')' stmt .

    $default  reduce using rule 115 (whilestmt)


state 185

   25 addsubExpr: expr . '+' expr
   26           | expr . '-' expr
   27 muldivmodExpr: expr . '*' expr
   28              | expr . '/' expr
   29              | expr . '%' expr
   30 cmpExpr: expr . '>' expr
   31        | expr . GREATER_EQ expr
   32        | expr . '<' expr
   33        | expr . LESSER_EQ expr
   34        | expr . EQUAL expr
   35        | expr . NOTEQUAL expr
   36 booleanExpr: expr . AND expr
   37            | expr . OR expr
  117 forstmt: FOR $@8 '(' elist ';' expr . ';' elist ')' stmt

    AND         shift, and go to state 78
    OR          shift, and go to state 79
    GREATER_EQ  shift, and go to state 80
    LESSER_EQ   shift, and go to state 81
    NOTEQUAL    shift, and go to state 82
    EQUAL       shift, and go to state 83
    '>'         shift, and go to state 84
    '<'         shift, and go to state 85
    '+'         shift, and go to state 86
    '-'         shift, and go to state 87
    '*'         shift, and go to state 88
    '/'         shift, and go to state 89
    '%'         shift, and go to state 90
    ';'         shift, and go to state 194


state 186

   94 funcdef: FUNCTION IDENTIFIER $@3 '(' idlist ')' . $@4 block

    $default  reduce using rule 93 ($@4)

    $@4  go to state 195


state 187

  110 helpidlist: ',' IDENTIFIER . helpidlist
  111           | ',' IDENTIFIER .

    ','  shift, and go to state 172

    $default  reduce using rule 111 (helpidlist)

    helpidlist  go to state 196


state 188

  109 idlist: IDENTIFIER helpidlist comment .

    $default  reduce using rule 109 (idlist)


state 189

   97 funcdef: FUNCTION $@5 '(' idlist ')' $@6 . block

    '{'  shift, and go to state 27

    block  go to state 197


state 190

   85 indexedelem: '{' expr ':' expr '}' .

    $default  reduce using rule 85 (indexedelem)


state 191

   68 methodcall: DOUBLE_DOT IDENTIFIER '(' elist ')' .

    $default  reduce using rule 68 (methodcall)


state 192

   72 listed_expr: ',' expr listed_expr .

    $default  reduce using rule 72 (listed_expr)


state 193

  113 ifstmt: IF '(' expr ')' stmt ELSE stmt .

    $default  reduce using rule 113 (ifstmt)


state 194

  117 forstmt: FOR $@8 '(' elist ';' expr ';' . elist ')' stmt

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25

    $default  reduce using rule 71 (elist)

    expr           go to state 144
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    elist          go to state 198
    objectdef      go to state 45
    const          go to state 48


state 195

   94 funcdef: FUNCTION IDENTIFIER $@3 '(' idlist ')' $@4 . block

    '{'  shift, and go to state 27

    block  go to state 199


state 196

  110 helpidlist: ',' IDENTIFIER helpidlist .

    $default  reduce using rule 110 (helpidlist)


state 197

   97 funcdef: FUNCTION $@5 '(' idlist ')' $@6 block .

    $default  reduce using rule 97 (funcdef)


state 198

  117 forstmt: FOR $@8 '(' elist ';' expr ';' elist . ')' stmt

    ')'  shift, and go to state 200


state 199

   94 funcdef: FUNCTION IDENTIFIER $@3 '(' idlist ')' $@4 block .

    $default  reduce using rule 94 (funcdef)


state 200

  117 forstmt: FOR $@8 '(' elist ';' expr ';' elist ')' . stmt

    INTEGER       shift, and go to state 1
    FLOAT         shift, and go to state 2
    IDENTIFIER    shift, and go to state 3
    STRING_DEF    shift, and go to state 4
    COMMENT1      shift, and go to state 5
    COMMENT2      shift, and go to state 6
    COMMENT3      shift, and go to state 7
    IF            shift, and go to state 8
    WHILE         shift, and go to state 9
    FOR           shift, and go to state 10
    FUNCTION      shift, and go to state 11
    RETURN        shift, and go to state 12
    BREAK         shift, and go to state 13
    CONTINUE      shift, and go to state 14
    NOT           shift, and go to state 15
    LOCAL         shift, and go to state 16
    TRUE          shift, and go to state 17
    FALSE         shift, and go to state 18
    NIL           shift, and go to state 19
    DOUBLE_COLON  shift, and go to state 20
    PLUS_PLUS     shift, and go to state 21
    MINUS_MINUS   shift, and go to state 22
    '-'           shift, and go to state 23
    '['           shift, and go to state 24
    '('           shift, and go to state 25
    ';'           shift, and go to state 26
    '{'           shift, and go to state 27

    stmt           go to state 201
    comment        go to state 31
    expr           go to state 32
    addsubExpr     go to state 33
    muldivmodExpr  go to state 34
    cmpExpr        go to state 35
    booleanExpr    go to state 36
    term           go to state 37
    plus           go to state 38
    minus          go to state 39
    assignexpr     go to state 40
    primary        go to state 41
    lvalue         go to state 42
    member         go to state 43
    call           go to state 44
    objectdef      go to state 45
    block          go to state 46
    funcdef        go to state 47
    const          go to state 48
    ifstmt         go to state 49
    whilestmt      go to state 50
    forstmt        go to state 51
    returnstmt     go to state 52


state 201

  117 forstmt: FOR $@8 '(' elist ';' expr ';' elist ')' stmt .

    $default  reduce using rule 117 (forstmt)
